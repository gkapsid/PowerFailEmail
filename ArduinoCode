/*
   Email client sketch for IDE v1.0.5 and w5100/w5200
   Posted 7 May 2015 by SurferTim
   http://playground.arduino.cc/Code/Email?action=sourceblock&num=2

Modified to work after reading a digital input. On  any change send mail otherwise nothing.

A PULLED UP input is used instead of using a hardware pull up or pull down configuration!
*/

#include <SPI.h>
#include <Ethernet.h>

// this must be unique
byte mac[] = { 0x90, 0xA2, 0xDA, 0x00, 0x59, 0x67 };  
// change network settings to yours
IPAddress ip( 192, 168, xxx,xxx ); //IP address according to local net    
IPAddress gateway( 192, 168, xxx,xxx  ); //gateway
IPAddress subnet( 255, 255, xxx, xxx );

char server[] = "mail.server.com"; //your own email server (from google, yahoo etc)
int port = 2525;
int currentStatus = HIGH; 
int previousStatus = HIGH;

EthernetClient client;

void setup()
{
  Serial.begin(115200); //9600?
  pinMode(4,INPUT_PULLUP);
  /*while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only when debugging. To be removed.
  }*/
  Ethernet.begin(mac, ip, gateway, gateway, subnet); 
  delay(2000);
  }

void loop()
{
  
  currentStatus = digitalRead(4);
  
  if (currentStatus != previousStatus) //if a change in input state occured 
  {
  previousStatus = currentStatus; //update previous state variable
  
      if(sendEmail()) Serial.println(F("Email sent")); // and try to send mail
      else Serial.println(F("Email failed"));
  }
}
	

byte sendEmail()
{
  byte thisByte = 0;
  byte respCode;

  if(client.connect(server,port) == 1) {
    Serial.println(F("connected"));
  } else {
    Serial.println(F("connection failed"));
    return 0;
  }

  if(!eRcv()) return 0;

  Serial.println(F("Sending hello"));
// replace 1.2.3.4 with your Arduino's ip
  client.println("EHLO 1.2.3.4");
  if(!eRcv()) return 0;

  Serial.println(F("Sending auth login"));
  client.println("auth login");
  if(!eRcv()) return 0;

  Serial.println(F("Sending User"));
// Change to your base64 encoded user
  client.println("xxxxxxxxxx");

  if(!eRcv()) return 0;

  Serial.println(F("Sending Password"));
// change to your base64 encoded password
  client.println("xxxxxxxxxxxxxx");

  if(!eRcv()) return 0;

// change to your email address (sender)
  Serial.println(F("Sending From"));
  client.println("MAIL From: <xxxxxxx@mail.com>");
  if(!eRcv()) return 0;

// change to recipient address
  Serial.println(F("Sending To"));
  client.println("RCPT To: <yyyyyyy@xmail.com>");
  if(!eRcv()) return 0;

  Serial.println(F("Sending DATA"));
  client.println("DATA");
  if(!eRcv()) return 0;

  Serial.println(F("Sending email"));

// change to recipient address
  client.println("To: You <yyyyyyyy@xmail.com>");

// change to your address
  client.println("From: Me <xxxxxxxx@mail.com>");
  if (currentStatus == LOW) {//if current = LOW message Power failure restored (due to PULLUP logic!!)
  client.println("Subject: Arduino power monitor\r\n");

  client.println("Power Failure Restored");

  client.println(".");
  Serial.println("Power Failure Restored");
  }
  else if (currentStatus == HIGH){
    client.println("Subject: Arduino power monitor\r\n");

  client.println("Power Failure");

  client.println(".");
}
//else if currentStatus LOW message Power Failure!
  if(!eRcv()) return 0;

  Serial.println(F("Sending QUIT"));
  client.println("QUIT");
  if(!eRcv()) return 0;

  client.stop();

  Serial.println(F("disconnected"));

  return 1;
}

byte eRcv()
{
  byte respCode;
  byte thisByte;
  int loopCount = 0;

  while(!client.available()) {
    delay(1);
    loopCount++;

    // if nothing received for 10 seconds, timeout
    if(loopCount > 10000) {
      client.stop();
      Serial.println(F("\r\nTimeout"));
      return 0;
    }
  }

  respCode = client.peek();

  while(client.available())
  {  
    thisByte = client.read();    
    Serial.write(thisByte);
  }

  if(respCode >= '4')
  {
    efail();
    return 0;  
  }

  return 1;
}


void efail()
{
  byte thisByte = 0;
  int loopCount = 0;

  client.println(F("QUIT"));

  while(!client.available()) {
    delay(1);
    loopCount++;

    // if nothing received for 10 seconds, timeout
    if(loopCount > 10000) {
      client.stop();
      Serial.println(F("\r\nTimeout"));
      return;
    }
  }

  while(client.available())
  {  
    thisByte = client.read();    
    Serial.write(thisByte);
  }

  client.stop();

  Serial.println(F("disconnected"));
}
  
